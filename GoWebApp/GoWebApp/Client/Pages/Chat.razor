@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Configuration.IConfiguration _iconfig
@inject GoWebApp.Client.Services.IGetProfileService _getUser
@implements IAsyncDisposable
@attribute [Authorize]

@if (username != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-auto">
                <p>List of all people/click for chat</p>
                <br />
                @if (listOfNames != null)
                {
                    <div class="container vertical-scrollable overflow-auto">
                        <ul>
                            @foreach (var name in listOfNames)
                            {
                                <li>
                                    <a @onclick="@(() => SelectChat(name))">@name</a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <div class="col-auto">
                <div class="chatbox">
                    <div class="chatHeader">
                        <p>Send Message to: @selectedPerson</p>
                    </div>
                    <div class="chatBody">

                    </div>
                    <div class="chatFooter">
                        <form>
                            <input type="text" name="message" />
                            <button>Send</button>
                        </form>
                        
                    </div>
                </div>
                <p>chat window. You can type, it works now. All of the clients connected at the same time see this</p>
                <div class="form-group">
                    Username: @username
                    <br />
                    <div class="form-group">
                        <label>
                            Message:
                            <input @bind="messageInput" size="50" />
                        </label>
                    </div>
                    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
                </div>
                <hr>
                <ul id="messagesList">
                    @foreach (var message in messages)
                    {
                        <li>@message</li>
                    }
                </ul>

            </div>
        </div>
    </div>

}



@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username = null;
    private string messageInput;
    public List<string> listOfNames; //ce je task zraven, moras unwrappat task z await!
    private string selectedPerson = "neki";

    protected override async Task OnInitializedAsync()
    {
        listOfNames = await _getUser.GetAllUsers(); // dobis vsa imena iz baze

        var user = await _getUser.GetProfileInfo(); // dobis tvoj username, za chat username
        username = user.Username;
        var token = "token2"; // to se mora ujemat szi tem kar mas pod jwt bearer token
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gohub"), options =>
            {
            //options.AccessTokenProvider = () => Task.FromResult();
            options.Headers.Add("Authorization", $"Bearer {token}");
            })
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", username, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    public void SelectChat(string name)
    {
        selectedPerson = name;
    }


}

@*
    <div class="col-auto">
                <p>chat window. You can type, it works now. All of the clients connected at the same time see this</p>
                <div class="form-group">
                    Username: @username
                    <br />
                    <div class="form-group">
                        <label>
                            Message:
                            <input @bind="messageInput" size="50" />
                        </label>
                    </div>
                    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
                </div>
                <hr>
                <ul id="messagesList">
                    @foreach (var message in messages)
                    {
                        <li>@message</li>
                    }
                </ul>

            </div>
*@